name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0). If empty, uses the ref when manually dispatched from a tag).'
        required: false
        default: ''

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and create GitHub Release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: unzipper-linux
            platform_binary: unzipper
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: unzipper-macos
            platform_binary: unzipper
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: unzipper-windows.exe
            platform_binary: unzipper.exe

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build (release)
        run: cargo build --release --target ${{ matrix.target }}

      - name: Rename and prepare artifact
        shell: bash
        run: |
          mkdir -p build
          cp target/${{ matrix.target }}/release/${{ matrix.platform_binary }} build/${{ matrix.artifact_name }}

      - name: Determine tag and release name
        id: vars
        shell: pwsh
        run: |
          $ref = '${{ github.ref }}'
          $inputTag = '${{ github.event.inputs.tag }}'
          if ($inputTag -and $inputTag.Trim() -ne '') {
            $tag = $inputTag.Trim()
          } elseif ($ref -like 'refs/tags/*') {
            $tag = $ref.Replace('refs/tags/','')
          } else {
            # fallback for manual runs from branches: create a prerelease with timestamp
            $tag = "manual-${{ github.run_id }}"
          }
          echo "tag=$tag" >> $env:GITHUB_OUTPUT
          echo "name=unzipper-$tag" >> $env:GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.vars.outputs.tag }}
          name: ${{ steps.vars.outputs.name }}
          draft: false
          prerelease: ${{ startsWith(steps.vars.outputs.tag, 'manual-') }}
          generate_release_notes: true
          files: |
            build/${{ matrix.artifact_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}